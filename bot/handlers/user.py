from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
import bot.app.keyboards as kb
from aiogram.enums import ChatAction
from aiogram import Bot
import random
from datetime import datetime, timedelta
from bot.app.states import Documents,Chat
from bot.functions.file_function import File
from bot.functions.embedding_fuction import Embeddings
from bot.functions.requests import Database

user = Router()

from aiogram import types
from aiogram.types import FSInputFile
import os
import asyncio



@user.message(CommandStart())
async def cmd_start(message:Message,state:FSMContext):
    await state.clear()
    await message.answer('*–ü—Ä–∏–≤–µ—Ç —è —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –ò–ò –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —é—Ä–∏—Å—Ç*',parse_mode='Markdown',reply_markup=kb.main_menu)


@user.callback_query(F.data == 'AddDocx')
async def send_docx_handler(callback:CallbackQuery,state:FSMContext):
    await callback.answer()
    await callback.message.answer('*–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ DOCX —Ñ–∞–π–ª...*',parse_mode='Markdown')
    await state.set_state(Documents.wait_docx)

@user.callback_query(F.data == 'AddPdf')
async def send_docx_handler(callback:CallbackQuery,state:FSMContext):
    await callback.answer()
    await callback.message.answer('*–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ PDF —Ñ–∞–π–ª...*',parse_mode='Markdown')
    await state.set_state(Documents.wait_pdf)

@user.message(F.text == 'üí¨–î–∏–∞–ª–æ–≥')
async def chat_handler(message:Message,state:FSMContext):
    await message.answer('*–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å*',parse_mode='Markdown',reply_markup=kb.cancel)
    await state.set_state(Chat.chat)
    
@user.message(F.text == 'üö™–í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞')
async def cancel_handler(message:Message,state:FSMContext):
    await state.clear()
    await cmd_start(message,state)


@user.message(F.text == '‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏')
async def settings_handler(message:Message,state:FSMContext):
    await state.clear()
    config = await Database.get_config()
    text = f"""‚öôÔ∏è *–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*

ü§ñ *–ú–æ–¥–µ–ª—å GPT:* `{config.gpt_model}`

üß† *–†–æ–ª—å —Å–∏—Å—Ç–µ–º—ã:*
_{config.role}_

üì© *–ü—Ä–æ–º–ø—Ç:*
_{config.prompt}_

–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã.
"""
    
    await message.answer(text,parse_mode='Markdown',reply_markup=kb.inline_settings)

@user.message(Chat.chat)
async def chat_process_handler(message:Message,state:FSMContext):
    question = message.text
    await message.answer('–í–∞—à –∑–∞–ø—Ä–æ—Å –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è...')
    await message.bot.send_chat_action(chat_id=message.from_user.id,action=ChatAction.TYPING)
    data = await state.get_data()
    history = data.get('history', [])
    history.append(question)
    history = history[-20:]
    await state.update_data(history=history)
    print(f'HISTORY:______________{history}')
    joined_history = "\n".join(history)
    result = await Embeddings.load_1all_embeddings_from_folder(joined_history)
    config = await Database.get_config()
    history.append(result['answer'])
    await message.answer(f'üí¨*–í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç OpenAI* \n\n{result['answer']}',parse_mode='Markdown')
    await message.answer(f'*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–æ—Ç–æ—Ä–∞—è –±—ã–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞*\n\n{result["context"]}',parse_mode='Markdown')
    await message.answer(
    f"""üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*

‚è±Ô∏è –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞ –∫ GPT: {result["metrics"]["openai_time_sec"]:.2f} —Å–µ–∫
‚è±Ô∏è –í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π: {result["metrics"]["search_time_sec"]:.2f} —Å–µ–∫
‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞: {result["metrics"]["total_time_sec"]:.2f} —Å–µ–∫

üìù –í–æ–ø—Ä–æ—Å:
   - –°–∏–º–≤–æ–ª–æ–≤: {result["metrics"]["prompt_chars"]}
   - –¢–æ–∫–µ–Ω–æ–≤: {result["metrics"]["prompt_tokens"]}

üßæ –û—Ç–≤–µ—Ç:
   - –°–∏–º–≤–æ–ª–æ–≤: {result["metrics"]["response_chars"]}
   - –¢–æ–∫–µ–Ω–æ–≤: {result["metrics"]["response_tokens"]}

üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å:
   - Input: ${result["metrics"]["input_cost_usd"]:.6f}
   - Output: ${result["metrics"]["output_cost_usd"]:.6f}
   - –û–±—â–∞—è: ${result["metrics"]["total_cost_usd"]:.6f}

‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:
   - OpenAI –º–æ–¥–µ–ª—å: {config.gpt_model}
   - Role: {config.role}
   - Prompt: {config.prompt}
""",
    parse_mode='Markdown')


@user.message(Documents.wait_docx)
async def wait_docx_handler(message:Message,state:FSMContext):
    if not message.document:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .docx.")
        return

    if not message.document.file_name.endswith(".docx"):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .docx.")
        return

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    file_id = message.document.file_id
    file = await message.bot.get_file(file_id)

    # –ü—É—Ç—å –∫—É–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    save_dir = 'files'
    os.makedirs(save_dir, exist_ok=True)  # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç

    file_path = os.path.join(save_dir, message.document.file_name)

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∏–∑ Telegram –≤ –Ω—É–∂–Ω–æ–µ –º–µ—Å—Ç–æ
    await message.bot.download_file(file.file_path, destination=file_path)
    txt =await File.docx_to_txt(file_path)
    await Embeddings.convert_txt_to_embeddings_batched(txt)
    
    await message.answer(f"‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ txt –∫–∞–∫ `{message.document.file_name}` –≤ `{save_dir}`.", parse_mode="Markdown")

    # –û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()


@user.message(Documents.wait_pdf)
async def wait_docx_handler(message:Message,state:FSMContext):
    if not message.document:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF.")
        return

    if not message.document.file_name.endswith(".pdf"):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .pdf.")
        return

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    file_id = message.document.file_id
    file = await message.bot.get_file(file_id)

    # –ü—É—Ç—å –∫—É–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    save_dir = 'files'
    os.makedirs(save_dir, exist_ok=True)  # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç

    file_path = os.path.join(save_dir, message.document.file_name)

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∏–∑ Telegram –≤ –Ω—É–∂–Ω–æ–µ –º–µ—Å—Ç–æ
    await message.bot.download_file(file.file_path, destination=file_path)
    #await File.docx_to_txt(file_path)
    txt = await File.pdf_to_txt(file_path)
    await Embeddings.convert_txt_to_embeddings_batched(txt)

    await message.answer(f"‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ txt –∫–∞–∫ `{message.document.file_name}` –≤ `{save_dir}`.", parse_mode="Markdown")

    # –û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()


@user.message(F.text == 'test')
async def tst(message:Message):
    await File.get_unique_filenames()